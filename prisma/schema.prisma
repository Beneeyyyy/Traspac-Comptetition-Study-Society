generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model School {
  id              Int       @id @default(autoincrement())
  npsn            String    @unique  // Nomor Pokok Sekolah Nasional
  name            String    // Nama Sekolah
  address         String    // Alamat Lengkap
  city            String    // Kota/Kabupaten
  province        String    // Provinsi
  postalCode      String    // Kode Pos
  level           String    // SD/SMP/SMA/SMK
  type            String    // Negeri/Swasta
  status          String    @default("active") // active/inactive
  
  // Metadata
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  students        User[]    // Relasi dengan User
}

model Category {
  id          Int           @id @default(autoincrement())
  name        String
  description String?
  image       String?
  points      Point[]
  subcategories Subcategory[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Subcategory {
  id          Int           @id @default(autoincrement())
  name        String
  description String?
  image       String?
  categoryId  Int
  category    Category      @relation(fields: [categoryId], references: [id])
  points      Point[]
  materials   Material[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Material {
  id            Int         @id @default(autoincrement())
  title         String
  description   String      @default("")
  image         String?     // Thumbnail material
  xp_reward     Int         @default(0)
  estimated_time Int        @default(30)
  glossary      Json?       // Array of {term: string, definition: string}
  subcategoryId Int
  is_published  Boolean     @default(false)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  // Relations
  subcategory   Subcategory @relation(fields: [subcategoryId], references: [id])
  stages        Stage[]
  points        Point[]
  progress      MaterialProgress[]
  discussions   Discussion[]
}

model Stage {
  id          Int       @id @default(autoincrement())
  title       String    // "1. Materi" atau "2. Eksplorasi"
  order       Int       // Urutan stage
  contents    Json      // Array of content items
  materialId  Int       // Foreign key ke Material
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  material    Material  @relation(fields: [materialId], references: [id])
}

model User {
  id              Int           @id @default(autoincrement())
  name            String
  email           String        @unique
  password        String
  role            String        @default("user")
  image           String?
  
  // Profile Info
  schoolId        Int?          // Foreign key for School
  school          School?       @relation(fields: [schoolId], references: [id])
  bio             String?
  interests       String[]      @default([])
  currentGoal     String?
  bannerImage     String?
  
  // Stats & Progress
  totalPoints     Int           @default(0)
  totalXP         Int           @default(0)
  rank            String        @default("Pemula")
  level           Int           @default(1)
  studyStreak     Int           @default(0)
  lastStudyDate   DateTime?
  weeklyStudyTime Int           @default(0)    // in minutes
  monthlyStudyTime Int          @default(0)    // in minutes
  totalStudyTime  Int           @default(0)    // in minutes
  
  // Achievements & Progress
  completedMaterials Int        @default(0)
  completedQuizzes   Int        @default(0)
  completedCourses   Int        @default(0)
  
  // Timestamps
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  lastActive      DateTime      @default(now())
  
  // Relations
  points          Point[]
  achievements    UserAchievement[]
  studyHistory    StudyHistory[]
  materialProgress MaterialProgress[]
  discussions     Discussion[]
  replies         Reply[]
  likes           Like[]
}

model Point {
  id            Int      @id @default(autoincrement())
  userId        Int
  user          User     @relation(fields: [userId], references: [id])
  categoryId    Int
  category      Category @relation(fields: [categoryId], references: [id])
  subcategoryId Int
  subcategory   Subcategory @relation(fields: [subcategoryId], references: [id])
  materialId    Int
  material      Material @relation(fields: [materialId], references: [id])
  value         Int      @default(0)
  createdAt     DateTime @default(now())
}

model UserAchievement {
  id            Int      @id @default(autoincrement())
  userId        Int
  user          User     @relation(fields: [userId], references: [id])
  achievementId Int
  unlockedAt    DateTime @default(now())
}

model StudyHistory {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  activity  String
  duration  Int      // in minutes
  createdAt DateTime @default(now())
}

model Notification {
  id          Int      @id @default(autoincrement())
  userId      Int
  type        String   // e.g., "XP_EARNED", "ACHIEVEMENT_UNLOCKED"
  message     String
  data        Json?    // Additional data in JSON format
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
}

model MaterialProgress {
  id          Int      @id @default(autoincrement())
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  materialId  Int
  material    Material @relation(fields: [materialId], references: [id])
  progress    Float    @default(0)
  completed   Boolean  @default(false)
  lastAccessed DateTime @default(now())
  stageProgress String @default("{}")  // Store as JSON string
  completedStages Int[] @default([])   // Array of completed stage indices
  activeStage Int @default(0)          // Current active stage

  @@unique([userId, materialId])
}

// Discussion System Models
model Discussion {
  id              Int       @id @default(autoincrement())
  content         String
  userId          Int
  materialId      Int
  isResolved      Boolean   @default(false)
  resolvedReplyId Int?      @unique
  pointAwarded    Int?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  user           User      @relation(fields: [userId], references: [id])
  material       Material  @relation(fields: [materialId], references: [id])
  resolvedReply  Reply?    @relation("ResolvedDiscussion", fields: [resolvedReplyId], references: [id])
  replies        Reply[]   @relation("DiscussionReplies")
  likes          Like[]    @relation("DiscussionLikes")

  @@index([userId])
  @@index([materialId])
}

model Reply {
  id             Int        @id @default(autoincrement())
  content        String
  userId         Int
  discussionId   Int
  parentId       Int?
  isResolved     Boolean    @default(false)
  pointReceived  Int?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  user           User       @relation(fields: [userId], references: [id])
  discussion     Discussion @relation("DiscussionReplies", fields: [discussionId], references: [id])
  parent         Reply?     @relation("ReplyToReply", fields: [parentId], references: [id])
  children       Reply[]    @relation("ReplyToReply")
  resolvedFor    Discussion? @relation("ResolvedDiscussion")
  likes          Like[]     @relation("ReplyLikes")

  @@index([userId])
  @@index([discussionId])
}

model Like {
  id            Int        @id @default(autoincrement())
  userId        Int
  discussionId  Int?
  replyId       Int?
  createdAt     DateTime   @default(now())

  user          User       @relation(fields: [userId], references: [id])
  discussion    Discussion? @relation("DiscussionLikes", fields: [discussionId], references: [id])
  reply         Reply?     @relation("ReplyLikes", fields: [replyId], references: [id])

  @@unique([userId, discussionId])
  @@unique([userId, replyId])
  @@index([userId])
  @@index([discussionId])
  @@index([replyId])
}
