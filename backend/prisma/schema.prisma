// This is your Prisma schema file

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id          Int       @id @default(autoincrement())
  email       String    @unique
  password    String
  name        String
  role        String    @default("user")
  image       String?
  schoolId    Int?
  bio         String?
  interests   String[]
  currentGoal String?
  totalPoints Int       @default(0)
  level       Int       @default(1)
  rank        String    @default("Pemula")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  school      School?   @relation(fields: [schoolId], references: [id])
  points      Point[]
}

model School {
  id        Int      @id @default(autoincrement())
  name      String
  address   String?
  city      String?
  province  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users     User[]
}

model Category {
  id            Int           @id @default(autoincrement())
  name          String
  description   String?
  image         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  subcategories Subcategory[]
  points        Point[]
}

model Subcategory {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  image       String?
  categoryId  Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  category    Category  @relation(fields: [categoryId], references: [id])
  materials   Material[]
  points      Point[]
}

model Material {
  id            Int         @id @default(autoincrement())
  title         String
  content       String
  image         String?
  point_value   Int         @default(0)
  subcategoryId Int
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  subcategory   Subcategory @relation(fields: [subcategoryId], references: [id])
  points        Point[]
}

model Point {
  id            Int         @id @default(autoincrement())
  value         Int
  userId        Int
  categoryId    Int?
  subcategoryId Int?
  materialId    Int?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  user          User        @relation(fields: [userId], references: [id])
  category      Category?   @relation(fields: [categoryId], references: [id])
  subcategory   Subcategory? @relation(fields: [subcategoryId], references: [id])
  material      Material?   @relation(fields: [materialId], references: [id])
} 